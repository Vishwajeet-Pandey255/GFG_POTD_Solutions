class Solution {
    public int minCoins(int coins[], int sum) {
        int n = coins.length;
        int dp[] = new int[sum + 1];
        
        // Initialize dp array with a large value
        for (int i = 1; i <= sum; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        
        // Base case: 0 coins needed to make sum 0
        dp[0] = 0;
        
        // Fill the dp array
        for (int i = 1; i <= sum; i++) {
            for (int j = 0; j < n; j++) {
                if (coins[j] <= i && dp[i - coins[j]] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        
        // If dp[sum] is still MAX_VALUE, it means sum cannot be formed
        return dp[sum] == Integer.MAX_VALUE ? -1 : dp[sum];
    }
}
