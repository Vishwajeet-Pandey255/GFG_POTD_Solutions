/*
class Node {
    int data;
    Node left, right;
    Node(int d) {
        data = d;
        left = right = null;
    }
}
*/

import java.util.*;

class Solution {
    ArrayList<Integer> zigZagTraversal(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        boolean leftToRight = true; // start with left to right
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            ArrayList<Integer> level = new ArrayList<>(size);
            
            for (int i = 0; i < size; i++) {
                Node curr = queue.poll();
                
                // add current node value
                level.add(curr.data);
                
                // add children to queue
                if (curr.left != null) queue.add(curr.left);
                if (curr.right != null) queue.add(curr.right);
            }
            
            // if current level is right to left, reverse it
            if (!leftToRight) {
                Collections.reverse(level);
            }
            
            // add level elements to result
            result.addAll(level);
            
            // toggle the direction
            leftToRight = !leftToRight;
        }
        
        return result;
    }
}
