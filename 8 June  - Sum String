class Solution {
    public boolean isSumString(String s) {
        int n = s.length();
        for (int i = 1; i <= n / 2; i++) {
            for (int j = 1; Math.max(i, j) <= n - i - j; j++) {
                if (isValid(s.substring(0, i)) && isValid(s.substring(i, i + j))) {
                    String s1 = s.substring(0, i);
                    String s2 = s.substring(i, i + j);
                    if (checkSumString(s1, s2, i + j, s)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean isValid(String s) {
        return !(s.length() > 1 && s.charAt(0) == '0');
    }

    private boolean checkSumString(String s1, String s2, int start, String s) {
        if (start == s.length()) {
            return true;
        }
        String sum = addStrings(s1, s2);
        int sumLength = sum.length();
        if (start + sumLength > s.length()) return false;

        String next = s.substring(start, start + sumLength);
        if (!sum.equals(next)) return false;

        return checkSumString(s2, sum, start + sumLength, s);
    }

    private String addStrings(String num1, String num2) {
        StringBuilder sb = new StringBuilder();
        int carry = 0, i = num1.length() - 1, j = num2.length() - 1;

        while (i >= 0 || j >= 0 || carry != 0) {
            int n1 = (i >= 0) ? num1.charAt(i--) - '0' : 0;
            int n2 = (j >= 0) ? num2.charAt(j--) - '0' : 0;
            int sum = n1 + n2 + carry;
            sb.append(sum % 10);
            carry = sum / 10;
        }
        return sb.reverse().toString();
    }
}
