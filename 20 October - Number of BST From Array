import java.util.*;

class Solution {
    public ArrayList<Integer> countBSTs(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> result = new ArrayList<>(n);
        
        // Precompute Catalan numbers up to n (n <= 6 by constraints)
        int[] catalan = new int[n + 1];
        catalan[0] = 1;
        if (n >= 1) catalan[1] = 1;
        for (int k = 2; k <= n; k++) {
            long sum = 0;
            for (int i = 0; i < k; i++) {
                sum += (long)catalan[i] * catalan[k - i - 1];
            }
            catalan[k] = (int)sum; // safe within constraints
        }
        
        // For each element as root (in original order), count smaller and larger elements
        for (int i = 0; i < n; i++) {
            int leftCount = 0;
            int rightCount = 0;
            for (int j = 0; j < n; j++) {
                if (j == i) continue;
                if (arr[j] < arr[i]) leftCount++;
                else rightCount++;
            }
            int ways = catalan[leftCount] * catalan[rightCount];
            result.add(ways);
        }
        
        return result;
    }
}
