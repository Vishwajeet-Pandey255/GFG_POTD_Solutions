import java.util.*;

class Solution {
    public ArrayList<String> findExpr(String s, int target) {
        ArrayList<String> res = new ArrayList<>();
        if (s == null || s.length() == 0) return res;
        backtrack(res, new StringBuilder(), s, target, 0, 0, 0);
        Collections.sort(res); // final result in lexicographic order
        return res;
    }
    
    private void backtrack(ArrayList<String> res, StringBuilder expr, String num, int target, int pos, long currVal, long prevNum) {
        // Base condition
        if (pos == num.length()) {
            if (currVal == target) {
                res.add(expr.toString());
            }
            return;
        }

        for (int i = pos; i < num.length(); i++) {
            // Skip numbers with leading zeros
            if (i != pos && num.charAt(pos) == '0') break;

            String part = num.substring(pos, i + 1);
            long curr = Long.parseLong(part);
            int len = expr.length();

            if (pos == 0) {
                // First number, directly take it
                expr.append(part);
                backtrack(res, expr, num, target, i + 1, curr, curr);
                expr.setLength(len);
            } else {
                // Add +
                expr.append("+").append(part);
                backtrack(res, expr, num, target, i + 1, currVal + curr, curr);
                expr.setLength(len);

                // Add -
                expr.append("-").append(part);
                backtrack(res, expr, num, target, i + 1, currVal - curr, -curr);
                expr.setLength(len);

                // Add *
                expr.append("*").append(part);
                backtrack(res, expr, num, target, i + 1, currVal - prevNum + prevNum * curr, prevNum * curr);
                expr.setLength(len);
            }
        }
    }
}
