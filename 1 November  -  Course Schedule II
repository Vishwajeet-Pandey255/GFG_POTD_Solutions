class Solution {
    public ArrayList<Integer> findOrder(int n, int[][] prerequisites) {
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }
        
        int[] indegree = new int[n];
        
        // build graph
        for(int[] p : prerequisites) {
            int x = p[0]; // course x depends on y
            int y = p[1];
            adj.get(y).add(x);
            indegree[x]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        
        // push all nodes with indegree 0
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0) q.add(i);
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        while(!q.isEmpty()) {
            int node = q.poll();
            ans.add(node);
            
            for(int nbr : adj.get(node)) {
                indegree[nbr]--;
                if(indegree[nbr] == 0) q.add(nbr);
            }
        }
        
        // if we got all courses
        if(ans.size() == n) return ans;
        
        return new ArrayList<>(); // empty -> cycle exists
    }
}
