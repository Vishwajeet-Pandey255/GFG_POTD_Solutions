class Solution {
    public int countWays(String digits) {
        if (digits == null || digits.length() == 0 || digits.charAt(0) == '0') {
            return 0;
        }
        
        int n = digits.length();
        int mod = 1000000007;
        
        int[] dp = new int[n + 1];
        dp[0] = 1; // Base case: Empty string has one way to decode
        dp[1] = digits.charAt(0) != '0' ? 1 : 0;
        
        for (int i = 2; i <= n; i++) {
            int oneDigit = digits.charAt(i - 1) - '0';
            int twoDigit = (digits.charAt(i - 2) - '0') * 10 + oneDigit;
            
            if (oneDigit > 0) {
                dp[i] = (dp[i] + dp[i - 1]) % mod;
            }
            
            if (twoDigit >= 10 && twoDigit <= 26) {
                dp[i] = (dp[i] + dp[i - 2]) % mod;
            }
        }
        
        return dp[n];
    }
}
