import java.util.*;

class Solution {
    public int longestSubarray(int[] arr, int k) {
        int n = arr.length;
        int[] mapped = new int[n];
        
        for (int i = 0; i < n; i++) {
            mapped[i] = arr[i] > k ? 1 : -1;
        }

        Map<Integer, Integer> prefixMap = new HashMap<>();
        int prefixSum = 0, maxLen = 0;

        for (int i = 0; i < n; i++) {
            prefixSum += mapped[i];

            if (prefixSum > 0) {
                maxLen = i + 1;
            } else {
                if (!prefixMap.containsKey(prefixSum)) {
                    prefixMap.put(prefixSum, i);
                }
                if (prefixMap.containsKey(prefixSum - 1)) {
                    maxLen = Math.max(maxLen, i - prefixMap.get(prefixSum - 1));
                }
            }
        }

        return maxLen;
    }
}
