/*
class Node {
    int data;
    Node left, right;

    public Node(int data){
        this.data = data;
    }
}
*/
class Solution {
    private static class Pair {
        int length;
        int sum;
        Pair(int length, int sum) {
            this.length = length;
            this.sum = sum;
        }
    }
    
    public int sumOfLongRootToLeafPath(Node root) {
        Pair res = helper(root);
        return res.sum;
    }
    
  
    private Pair helper(Node node) {
        if (node == null) {
            return new Pair(0, 0);
        }
        Pair left = helper(node.left);
        Pair right = helper(node.right);
        
        if (left.length > right.length) {
            return new Pair(left.length + 1, left.sum + node.data);
        } else if (right.length > left.length) {
            return new Pair(right.length + 1, right.sum + node.data);
        } else {
            int bestSum = Math.max(left.sum, right.sum) + node.data;
            return new Pair(left.length + 1, bestSum);
        }
    }
}
