import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
    public int mostBooked(int n, int[][] meetings) {
        // Sort meetings by their original start time
        Arrays.sort(meetings, (a, b) -> Integer.compare(a[0], b[0]));

        // min‐heap of available room indices
        PriorityQueue<Integer> freeRooms = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            freeRooms.offer(i);
        }

        // min‐heap of busy rooms, ordered by (endTime, roomId)
        PriorityQueue<long[]> busyRooms = new PriorityQueue<>(
            (a, b) -> a[0] != b[0] ? Long.compare(a[0], b[0]) : Long.compare(a[1], b[1])
        );

        // Count how many meetings each room hosts
        int[] count = new int[n];

        for (int[] mt : meetings) {
            long start = mt[0], end = mt[1];
            long duration = end - start;

            // Free up rooms that have finished by 'start'
            while (!busyRooms.isEmpty() && busyRooms.peek()[0] <= start) {
                freeRooms.offer((int)busyRooms.poll()[1]);
            }

            if (!freeRooms.isEmpty()) {
                // Assign to the smallest‐numbered free room
                int roomId = freeRooms.poll();
                count[roomId]++;
                // It will now be busy until start + duration
                busyRooms.offer(new long[]{ start + duration, roomId });
            } else {
                // No rooms free: wait for the earliest one to free
                long[] nextFree = busyRooms.poll();
                long freeTime = nextFree[0];
                int roomId = (int)nextFree[1];
                count[roomId]++;
                // Schedule this meeting at freeTime for the same duration
                busyRooms.offer(new long[]{ freeTime + duration, roomId });
            }
        }

        // Find the room with the highest count (break ties by smaller index)
        int bestRoom = 0;
        for (int i = 1; i < n; i++) {
            if (count[i] > count[bestRoom]) {
                bestRoom = i;
            }
        }
        return bestRoom;
    }
}
