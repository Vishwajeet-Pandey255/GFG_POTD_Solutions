class Solution {
    int maxValue(int[] arr) {
        int n = arr.length;
        if (n == 1) return arr[0];

        // Calculate the max sum for two cases
        return Math.max(rob(arr, 0, n - 2), rob(arr, 1, n - 1));
    }

    // Helper function to calculate the maximum sum without adjacent constraints
    private int rob(int[] arr, int start, int end) {
        int prev2 = 0, prev1 = 0;

        for (int i = start; i <= end; i++) {
            int take = arr[i] + prev2;
            int notTake = prev1;
            int curr = Math.max(take, notTake);
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
}
