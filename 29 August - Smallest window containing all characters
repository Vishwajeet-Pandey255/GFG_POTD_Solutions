import java.util.*;

class Solution {
    public static String smallestWindow(String s, String p) {
        if (s.length() < p.length()) return "";
        
        // Store frequency of characters in p
        int[] targetFreq = new int[26];
        for (char c : p.toCharArray()) {
            targetFreq[c - 'a']++;
        }
        
        int[] windowFreq = new int[26];
        int required = p.length(); // total characters we need to match
        int matched = 0;
        
        int left = 0, minLen = Integer.MAX_VALUE, startIdx = -1;
        
        for (int right = 0; right < s.length(); right++) {
            char rch = s.charAt(right);
            windowFreq[rch - 'a']++;
            
            // If this character is useful (needed) and does not exceed requirement
            if (targetFreq[rch - 'a'] > 0 && windowFreq[rch - 'a'] <= targetFreq[rch - 'a']) {
                matched++;
            }
            
            // When we matched all chars of p
            while (matched == required) {
                // Check window size
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    startIdx = left;
                }
                
                // Shrink from left
                char lch = s.charAt(left);
                windowFreq[lch - 'a']--;
                
                // If character was part of p and we now lack it
                if (targetFreq[lch - 'a'] > 0 && windowFreq[lch - 'a'] < targetFreq[lch - 'a']) {
                    matched--;
                }
                left++;
            }
        }
        
        return startIdx == -1 ? "" : s.substring(startIdx, startIdx + minLen);
    }
}
