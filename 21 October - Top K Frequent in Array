import java.util.*;

class Solution {
    public ArrayList<Integer> topKFreq(int[] arr, int k) {
        // Step 1: Count frequency of each element
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : arr) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Use a PriorityQueue (Max Heap)
        // Sort by frequency descending, then by number descending
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            (a, b) -> (a[1] == b[1]) ? b[0] - a[0] : b[1] - a[1]
        );

        // Step 3: Add all elements to the heap
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            pq.add(new int[]{entry.getKey(), entry.getValue()});
        }

        // Step 4: Extract top k elements
        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < k && !pq.isEmpty(); i++) {
            result.add(pq.poll()[0]);
        }

        return result;
    }
}
