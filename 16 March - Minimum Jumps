class Solution {
    static int minJumps(int[] arr) {
        int n = arr.length;
        
        // If the first element is 0, we can't move anywhere
        if (n <= 1) return 0;
        if (arr[0] == 0) return -1;
        
        int maxReach = arr[0]; // The farthest index we can currently reach
        int steps = arr[0]; // Steps we can still take in the current range
        int jumps = 1; // Number of jumps taken
        
        for (int i = 1; i < n; i++) {
            if (i == n - 1) return jumps; // Reached the last index
            
            maxReach = Math.max(maxReach, i + arr[i]); // Update maxReach
            steps--; // Use a step
            
            if (steps == 0) { // Need to take another jump
                jumps++;
                if (i >= maxReach) return -1; // If we can't move forward, return -1
                steps = maxReach - i; // Update steps for the new range
            }
        }
        return -1;
    }
}
