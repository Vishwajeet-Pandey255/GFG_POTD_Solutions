import java.util.*;

class Solution {
    public int countPaths(int[][] edges, int V, int src, int dest) {
        List<List<Integer>> adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            int u = e[0], v = e[1];
            adj.get(u).add(v);
        }

        int[] indegree = new int[V];
        for (int u = 0; u < V; u++) {
            for (int v : adj.get(u)) {
                indegree[v]++;
            }
        }

        Queue<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        List<Integer> topo = new ArrayList<>(V);
        while (!q.isEmpty()) {
            int u = q.poll();
            topo.add(u);
            for (int v : adj.get(u)) {
                indegree[v]--;
                if (indegree[v] == 0) {
                    q.offer(v);
                }
            }
        }

        long[] dp = new long[V];
        dp[src] = 1;  

        for (int u : topo) {
            if (dp[u] == 0) {
                continue;
            }
            for (int v : adj.get(u)) {
                dp[v] += dp[u];
            }
        }

        return (int) dp[dest];
    }
}
