import java.util.PriorityQueue;

class Solution {
    public static int minCost(int[] arr) {
        if (arr.length <= 1) return 0;

        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for (int rope : arr) {
            pq.add(rope);
        }

        int totalCost = 0;

        while (pq.size() > 1) {
            int first = pq.poll();   // smallest
            int second = pq.poll();  // next smallest

            int cost = first + second;
            totalCost += cost;

            pq.add(cost); // Add the new rope back to the heap
        }

        return totalCost;
    }

    public static void main(String[] args) {
        int[] arr1 = {4, 3, 2, 6};
        System.out.println(minCost(arr1)); // Output: 29

        int[] arr2 = {4, 2, 7, 6, 9};
        System.out.println(minCost(arr2)); // Output: 62

        int[] arr3 = {10};
        System.out.println(minCost(arr3)); // Output: 0
    }
}
