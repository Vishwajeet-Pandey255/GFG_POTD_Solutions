class Solution {
    static ArrayList<Integer> articulationPoints(int V, int[][] edges) {
        // Build adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int[] disc = new int[V]; // Discovery time of each node
        int[] low = new int[V];  // Lowest discovery time reachable
        boolean[] visited = new boolean[V];
        boolean[] isArticulation = new boolean[V];
        int[] time = new int[1]; // time[0] is current time

        // Run DFS for each component
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, -1, time, disc, low, visited, adj, isArticulation);
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            if (isArticulation[i]) result.add(i);
        }

        if (result.isEmpty()) result.add(-1);
        return result;
    }

    private static void dfs(int u, int parent, int[] time, int[] disc, int[] low,
                            boolean[] visited, ArrayList<ArrayList<Integer>> adj,
                            boolean[] isArticulation) {
        visited[u] = true;
        disc[u] = low[u] = ++time[0];
        int children = 0;

        for (int v : adj.get(u)) {
            if (v == parent) continue;

            if (!visited[v]) {
                children++;
                dfs(v, u, time, disc, low, visited, adj, isArticulation);

                low[u] = Math.min(low[u], low[v]);

                // Articulation point conditions
                if (parent != -1 && low[v] >= disc[u]) {
                    isArticulation[u] = true;
                }
            } else {
                low[u] = Math.min(low[u], disc[v]);
            }
        }

        // Special case for root
        if (parent == -1 && children > 1) {
            isArticulation[u] = true;
        }
    }
}
