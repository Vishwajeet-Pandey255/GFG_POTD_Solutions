import java.util.*;

class Solution {
    public int median(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        // Minimum possible element
        int low = Integer.MAX_VALUE;
        // Maximum possible element
        int high = Integer.MIN_VALUE;

        // Find min and max in the matrix
        for (int i = 0; i < n; i++) {
            low = Math.min(low, mat[i][0]);      // first element of each row
            high = Math.max(high, mat[i][m - 1]); // last element of each row
        }

        int desired = (n * m + 1) / 2; // position of median

        while (low < high) {
            int mid = (low + high) / 2;
            int count = 0;

            // Count how many numbers are <= mid
            for (int i = 0; i < n; i++) {
                count += upperBound(mat[i], mid);
            }

            if (count < desired) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }

    private int upperBound(int[] row, int target) {
        int l = 0, r = row.length;
        while (l < r) {
            int mid = (l + r) / 2;
            if (row[mid] <= target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
}
