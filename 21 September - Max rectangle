import java.util.*;

class Solution {
    static int maxArea(int mat[][]) {
        int n = mat.length;
        int m = mat[0].length;
        
        int[] heights = new int[m];
        int maxArea = 0;
        
        for (int i = 0; i < n; i++) {
            // update heights
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 0) heights[j] = 0;
                else heights[j] += 1;
            }
            
            // compute largest rectangle for current row
            maxArea = Math.max(maxArea, getMaxHistogramArea(heights));
        }
        
        return maxArea;
    }
    
    // Optimized version of largest rectangle in histogram
    private static int getMaxHistogramArea(int[] heights) {
        int n = heights.length;
        int[] left = new int[n];   // index of previous smaller element
        int[] right = new int[n];  // index of next smaller element
        Deque<Integer> stack = new ArrayDeque<>();
        
        // Previous smaller element
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        
        stack.clear();
        
        // Next smaller element
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        
        // Calculate max area
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = right[i] - left[i] - 1;
            maxArea = Math.max(maxArea, heights[i] * width);
        }
        
        return maxArea;
    }
}
