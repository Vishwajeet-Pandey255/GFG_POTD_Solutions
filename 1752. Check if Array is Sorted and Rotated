class Solution {
    public boolean check(int[] nums) {
        int count = 0, n = nums.length;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[(i + 1) % n]) 
                count++;
            if (count > 1) 
                return false;
        }
        
        return true;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////DRY RUN//////////////////////////////////////////////////////////////////

Explanation
Variables Initialization:

count = 0: This will count the number of times nums[i] > nums[i+1] (i.e., a decrease occurs).
n = nums.length: Stores the length of the array.
Loop through the Array:

The loop runs from i = 0 to n-1, comparing nums[i] with nums[i+1].
(i + 1) % n ensures circular comparison, meaning the last element (nums[n-1]) is compared with the first element (nums[0]).
Condition to Count Decrease:


if (nums[i] > nums[(i + 1) % n]) 
    count++;
If nums[i] > nums[i+1], it means the sequence is not sorted at that position, so we increment count.
If count > 1, it means there is more than one break point, so the array cannot be rotated to form a sorted array. The function immediately returns false.
Return the Result:

If there is at most one break point (count ≤ 1), then the array can be rotated to become sorted, so the function returns true.
Dry Run
Example 1: nums = [3, 4, 5, 1, 2]
✔️ Expected Output → true

i	nums[i]	nums[(i+1) % n]	nums[i] > nums[(i+1) % n]	count
0	3	4	❌	0
1	4	5	❌	0
2	5	1	✅	1
3	1	2	❌	1
4	2	3	❌	1
Since count = 1, the function returns true.

Example 2: nums = [2, 1, 3, 4]
❌ Expected Output → false

i	nums[i]	nums[(i+1) % n]	nums[i] > nums[(i+1) % n]	count
0	2	1	✅	1
1	1	3	❌	1
2	3	4	❌	1
3	4	2	✅	2
Since count = 2, the function returns false.

Example 3: nums = [1, 2, 3, 4, 5]
✔️ Expected Output → true

i	nums[i]	nums[(i+1) % n]	nums[i] > nums[(i+1) % n]	count
0	1	2	❌	0
1	2	3	❌	0
2	3	4	❌	0
3	4	5	❌	0
4	5	1	✅	1
Since count = 1, the function returns true.

Final Notes
Time Complexity: O(N) since we iterate over the array once.

Space Complexity: O(1) since we use only a few variables.


