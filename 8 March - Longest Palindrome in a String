class Solution {
    static String longestPalindrome(String s) {
        if (s == null || s.length() == 0) return "";
        
        // Transform the string to avoid even-length palindromes complexity
        StringBuilder t = new StringBuilder("#");
        for (char c : s.toCharArray()) {
            t.append(c).append("#");
        }
        
        int n = t.length();
        int[] p = new int[n]; // Array to store the radius of palindrome at each center
        int c = 0, r = 0; // Center and right boundary
        int maxLen = 0, centerIndex = 0;
        
        for (int i = 0; i < n; i++) {
            int mirror = 2 * c - i;
            if (i < r) {
                p[i] = Math.min(r - i, p[mirror]);
            }
            
            // Expand around center i
            while (i + p[i] + 1 < n && i - p[i] - 1 >= 0 && 
                   t.charAt(i + p[i] + 1) == t.charAt(i - p[i] - 1)) {
                p[i]++;
            }
            
            // Update center and right boundary
            if (i + p[i] > r) {
                c = i;
                r = i + p[i];
            }
            
            // Keep track of the longest palindrome found
            if (p[i] > maxLen) {
                maxLen = p[i];
                centerIndex = i;
            }
        }
        
        // Extract the longest palindromic substring
        int start = (centerIndex - maxLen) / 2;
        return s.substring(start, start + maxLen);
    }
}
