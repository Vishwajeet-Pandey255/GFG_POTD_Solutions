class Solution {
    public int minCost(int[] heights, int[] cost) {
        int n = heights.length;
        int low = Integer.MAX_VALUE, high = Integer.MIN_VALUE;
        
        for (int h : heights) {
            low = Math.min(low, h);
            high = Math.max(high, h);
        }

        int result = Integer.MAX_VALUE;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            int costMid = getTotalCost(heights, cost, mid);
            int costLeft = getTotalCost(heights, cost, mid - 1);
            int costRight = getTotalCost(heights, cost, mid + 1);

            result = Math.min(result, costMid);

            if (costLeft < costMid) {
                high = mid - 1;
            } else if (costRight < costMid) {
                low = mid + 1;
            } else {
                break; // mid is the optimal height
            }
        }

        return result;
    }

    private int getTotalCost(int[] heights, int[] cost, int targetHeight) {
        int total = 0;
        for (int i = 0; i < heights.length; i++) {
            total += Math.abs(heights[i] - targetHeight) * cost[i];
        }
        return total;
    }
}
