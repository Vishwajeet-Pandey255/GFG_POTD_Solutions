import java.util.*;

class Solution {
    public int maxSubarrSum(int[] arr, int a, int b) {
        int n = arr.length;
        
        // Step 1: Build prefix sum
        long[] prefix = new long[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }

        long ans = Long.MIN_VALUE;
        Deque<Integer> dq = new ArrayDeque<>(); // stores candidate indices of prefix sums

        for (int r = a; r <= n; r++) {
            // Maintain window for l in [r-b, r-a]
            int left = r - b;
            int right = r - a;

            // Remove out-of-window indices
            while (!dq.isEmpty() && dq.peekFirst() < left) {
                dq.pollFirst();
            }

            // Add the right endpoint of l window
            if (right >= 0) {
                while (!dq.isEmpty() && prefix[dq.peekLast()] >= prefix[right]) {
                    dq.pollLast();
                }
                dq.addLast(right);
            }

            // Best l is at dq.peekFirst()
            if (!dq.isEmpty()) {
                ans = Math.max(ans, prefix[r] - prefix[dq.peekFirst()]);
            }
        }

        return (int) ans;
    }
}
