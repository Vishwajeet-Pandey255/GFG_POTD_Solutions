class Solution {

    // Function to count total number of nodes in the binary tree
    int countNodes(Node root) {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    // Function to check if the tree is complete
    boolean isComplete(Node root, int index, int totalNodes) {
        if (root == null) return true;
        if (index >= totalNodes) return false;

        return isComplete(root.left, 2 * index + 1, totalNodes) &&
               isComplete(root.right, 2 * index + 2, totalNodes);
    }

    // Function to check max-heap property
    boolean isHeapProperty(Node root) {
        if (root.left == null && root.right == null) return true;

        if (root.right == null) {
            return (root.data >= root.left.data) && isHeapProperty(root.left);
        } else {
            return (root.data >= root.left.data) &&
                   (root.data >= root.right.data) &&
                   isHeapProperty(root.left) &&
                   isHeapProperty(root.right);
        }
    }

    // Main function to check if binary tree is a heap
    boolean isHeap(Node root) {
        int totalNodes = countNodes(root);
        return isComplete(root, 0, totalNodes) && isHeapProperty(root);
    }
}
