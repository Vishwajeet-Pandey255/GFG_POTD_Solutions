class Solution {
    static int countWays(String s) {
        int n = s.length();
        int[][][] dp = new int[n][n][2];
        // Initialize DP array with -1 (meaning not computed yet)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = -1;
                dp[i][j][1] = -1;
            }
        }
        return countWaysUtil(s, 0, n - 1, 1, dp);
    }
    
    static int countWaysUtil(String s, int i, int j, int isTrue, int[][][] dp) {
        // Base case: empty expression
        if (i > j) return 0;
        // Base case: single symbol
        if (i == j) {
            if (isTrue == 1)
                return s.charAt(i) == 'T' ? 1 : 0;
            else 
                return s.charAt(i) == 'F' ? 1 : 0;
        }
        
        if (dp[i][j][isTrue] != -1)
            return dp[i][j][isTrue];
        
        int ways = 0;
        // k points to the operator position
        for (int k = i + 1; k < j; k += 2) {
            // Calculate count for left and right partitions
            int leftTrue = countWaysUtil(s, i, k - 1, 1, dp);
            int leftFalse = countWaysUtil(s, i, k - 1, 0, dp);
            int rightTrue = countWaysUtil(s, k + 1, j, 1, dp);
            int rightFalse = countWaysUtil(s, k + 1, j, 0, dp);
            
            // Based on the operator, update the ways count
            if (s.charAt(k) == '&') {
                if (isTrue == 1)
                    ways += (leftTrue * rightTrue);
                else
                    ways += (leftTrue * rightFalse + leftFalse * rightTrue + leftFalse * rightFalse);
            } else if (s.charAt(k) == '|') {
                if (isTrue == 1)
                    ways += (leftTrue * rightTrue + leftTrue * rightFalse + leftFalse * rightTrue);
                else
                    ways += (leftFalse * rightFalse);
            } else if (s.charAt(k) == '^') {
                if (isTrue == 1)
                    ways += (leftTrue * rightFalse + leftFalse * rightTrue);
                else
                    ways += (leftTrue * rightTrue + leftFalse * rightFalse);
            }
        }
        return dp[i][j][isTrue] = ways;
    }
}
