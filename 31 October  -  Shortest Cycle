import java.util.*;

class Solution {
    public int shortCycle(int V, int[][] edges) {
        // Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }

        int ans = Integer.MAX_VALUE;

        // Run BFS from each node
        for (int start = 0; start < V; start++) {
            int[] dist = new int[V];
            Arrays.fill(dist, -1);
            int[] parent = new int[V];
            Arrays.fill(parent, -1);

            Queue<Integer> q = new LinkedList<>();
            q.add(start);
            dist[start] = 0;

            while (!q.isEmpty()) {
                int node = q.poll();

                for (int neighbor : adj.get(node)) {
                    if (dist[neighbor] == -1) {
                        // Not visited
                        dist[neighbor] = dist[node] + 1;
                        parent[neighbor] = node;
                        q.add(neighbor);
                    } else if (parent[node] != neighbor) {
                        // Found a cycle
                        ans = Math.min(ans, dist[node] + dist[neighbor] + 1);
                    }
                }
            }
        }

        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
