class Solution {

    public int minCost(int[][] houses) {
        int n = houses.length;

        boolean[] inMST = new boolean[n];
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        minHeap.offer(new int[]{0, 0}); // cost = 0, index = 0
        int totalCost = 0;

        while (!minHeap.isEmpty()) {
            int[] current = minHeap.poll();
            int cost = current[0];
            int u = current[1];

            if (inMST[u]) continue;

            inMST[u] = true;
            totalCost += cost;

            for (int v = 0; v < n; v++) {
                if (!inMST[v]) {
                    int dist = Math.abs(houses[u][0] - houses[v][0]) + Math.abs(houses[u][1] - houses[v][1]);
                    minHeap.offer(new int[]{dist, v});
                }
            }
        }

        return totalCost;
    }
}
