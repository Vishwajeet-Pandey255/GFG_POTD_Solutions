class Solution {
    public int maxKPower(int n, int k) {
        Map<Integer, Integer> primeFactors = new HashMap<>();
        for (int i = 2; i * i <= k; i++) {
            while (k % i == 0) {
                primeFactors.put(i, primeFactors.getOrDefault(i, 0) + 1);
                k /= i;
            }
        }
        if (k > 1) {
            primeFactors.put(k, 1);
        }

        int result = Integer.MAX_VALUE;
        for (Map.Entry<Integer, Integer> entry : primeFactors.entrySet()) {
            int p = entry.getKey();
            int requiredPower = entry.getValue();

            int countInFactorial = 0;
            int power = p;
            while (power <= n) {
                countInFactorial += n / power;
                if (power > n / p) break; 
                power *= p;
            }

            result = Math.min(result, countInFactorial / requiredPower);
        }

        return result;
    }
}
